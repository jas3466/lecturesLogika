import org.sireum.logika._

l"""{
    fact
        def f(n: Z): Z
            fZero. f(0) == 1
            fPos. A x: Z x > 0 -> f(x) == f(x-1) * x
}"""

// Given a non-negative integer argument n,
// factorial computes n!, where n! is defined as follows:
//   0! == 1
//   1! == 1 * 0!
//   2! == 2 * 1!
//   …
//   n! == n * (n – 1)!     (if n > 0)

def factorial(n: Z): Z = {
    // Goal: return 1 * 2 * 3 * … * n
    l"""{
        requires n >= 0         //precondition
        ensures result == f(n)  //postcondition
    }"""

    var r: Z = 1
    var i: Z = 0
    while (i < n) {
        l"""{
            invariant r == f(i)
                    i >= 0
                    i <= n
            modifies i,r
        }"""

        i = i + 1
        r = r * i
    }

    return r
}