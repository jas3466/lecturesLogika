import org.sireum.logika._

l"""{
    fact
        def f(n: Z): Z
            fZero. f(0) == 1
            fPos. A x: Z x > 0 -> f(x) == f(x-1) * x
}"""

// Given a non-negative integer argument n,
// factorial computes n!, where n! is defined as follows:
//   0! == 1
//   1! == 1 * 0!
//   2! == 2 * 1!
//   …
//   n! == n * (n – 1)!     (if n > 0)

def factorial(n: Z): Z = {
    // Goal: return 1 * 2 * 3 * … * n
    l"""{
        requires n >= 0         //precondition
        ensures  result == f(n) //postcondition
    }"""

    var r: Z = 1
    var i: Z = 0

    //prove invariants hold before loop
    l"""{
        1. r == 1       premise //variable assignment
        2. i == 0       premise //variable assignment
        3. n >= 0       premise //precondition
        4. i >= 0       algebra 2   //show 2nd part of invariant
        5. i <= n       algebra 2 3 //show 3rd part of invariant
        6. f(0) == 1    fact fZero
        7. f(i) == 1    subst2 2 6
        8. r == f(i)    algebra 1 7
        //FINISH
    }"""
    while (i < n) {
        l"""{
            invariant r == f(i)
                i >= 0
                i <= n
            modifies i,r
        }"""

        i = i + 1
        l"""{
            //PROCESS ASSIGNMENT
            1. i == i_old + 1   premise //from assignment statement
            2. r == f(i_old)    premise //from 1st part of loop invariant
            3. i_old >= 0       premise //from 2nd part of loop invariant
            4. i_old < n        premise //from the loop condition
            5. i <= n           algebra 1 4
            6. i > 0            algebra 1 3
            7. i_old == i - 1   algebra 1
            8. r == f(i - 1)    subst1 7 2
            //FINISH
        }"""

        r = r * i
        l"""{
            //PROCESS ASSIGNMENT
            //PROVE LOOP INVARIANTS STILL HOLD
            1. r == r_old * i                       premise //from the assignment statement
            2. i > 0                                premise
            3. i <= n                               premise
            4. r_old == f(i - 1)                    premise
            5. r_old * i == f(i-1) * i              algebra 4
            6. r == f(i-1) * i                      subst2 1 5
            7. A x: Z x > 0 -> f(x) == f(x-1) * x   fact fPos
            8. i > 0 -> f(i) == f(i-1) * i          Ae 7 i
            9. f(i) == f(i-1) * i                   ->e 8 2
            10. r == f(i)                           subst2 9 6
            11. i >= 0                              algebra 2
            //FINISH
        }"""
    }

    l"""{
        //PROVE POSTCONDITION
        1. r == f(i)        premise //1st part of loop invariant holds
        2. i >= 0           premise //2nd part of loop invariant holds
        3. i <= n           premise //3rd part of loop invariant holds
        4. !(i < n)         premise //loop condition is now false
        5. i == n           algebra 3 4
        6. r == f(n)        subst1 5 1
        //FINISH    
    }"""
    return r
}
